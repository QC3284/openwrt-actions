#
# https://github.com/QC3284/openwrt-actions
# File name: Build-X-wrt.yml
#
# Copyright (c) 2024-2025 QC3284 <https://www.xcqcoo.us.kg>
#
# This is free software, licensed under the GPL-3.0 License.
# See /LICENSE for more information.
#
#本仓库及文件只在Github发布
#作者：QC3284@github.com(https://github.com/QC3284)
#本仓库地址：https://github.com/QC3284/openwrt-actions
#最后更新时间：2025.4.19

name: 编译X-wrt (Compile X-wrt)

on:
  schedule:
    - cron: 0 3 * * 3,6
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "Dont care, and don't touch it!"
        required: true
        default: 'false'

env:
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: 准备环境 (Prepare the environment)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo Start
        sleep 3
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /etc/mysql
        sudo rm -rf /etc/php
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo Done
        
    - name: 安装必要软件包 (Installation of necessary packages)
      run: |
        echo Start
        echo $(uname -a) 
        sleep 5
        sudo -E apt update
        sudo -E apt upgrade -y
        sudo -E apt install build-essential ecj fastjar file flex g++ gcc-multilib g++-multilib gawk gettext git git-core java-propose-classpath libelf-dev libncurses5-dev libncursesw5-dev libssl-dev swig python3 python3-pip python3-dev python3-setuptools python3-pyelftools subversion unzip wget zlib1g-dev curl wget rsync qemu-utils zip -y
        sudo -E apt-get install -y libfuse-dev neofetch 7zip
        sudo -E apt full-upgrade -y
        pip install requests tqdm
        echo Done
        sleep 10

    - name: 拉取源码 (Pulling the source code)
      working-directory: /workdir
      run: |
        df -hT $PWD 
        git clone https://github.com/x-wrt/x-wrt.git openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        git pull
        git fetch origin
        git fetch origin --tags
        git checkout $(curl "https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-config-tag.txt")
         
        
    - name: 拉取插件 (Pull plug-in)
      run: |
        cd openwrt
        curl https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-git-001.sh | bash
        cd package
        wget https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/gitcj.py
        wget https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/giturl.txt
        python3 gitcj.py
        mv accesscontrol-plus/luci-app-accesscontrol-plus ./
        sleep 2
        sudo rm -rf accesscontrol-plus
        sleep 3
        
    - name: 下载横幅 (Download banner)
      run: |
        cd openwrt/package/base-files/files/etc/
        sudo rm -rf banner
        ls
        wget https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-banner.txt -O banner

    - name: 更新Feed (Update Feed)
      run: |
        cd openwrt
        ./scripts/feeds update -a
#        curl https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-git-002.sh | bash
#        curl https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-git-005.sh | bash
#        curl https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-git-003.sh | bash
        
    - name: 安装Feed (Install Feed)
      run: |
         cd openwrt
         ./scripts/feeds install -a
         df -hT $PWD

    - name: 下载配置 (Download Config (.config))
      run: |
         cd openwrt
         wget https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-actions-$(curl "https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-config-tag.txt").config -O .config
         echo " 下载完成 (Download complete)"

    - name: 下载包 (Download package (dl library))
      run: |
         sudo neofetch
         cd openwrt
         curl https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-make-001.sh | bash
    
    - name: 压缩已准备好的编译目录 (Compress the prepared compilation directory)
      run: |
          echo "Start"
          7zz a -mx=9 -mmt=8 "x-wrt-compilation-directory-$(curl "https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-config-tag.txt").7z" openwrt
          sleep 2
          echo "All Done"

    - name: 编译固件 (Compile Firmware)
      run: |
         mv "x-wrt-compilation-directory-$(curl "https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-config-tag.txt").7z" openwrt/
         cd openwrt
         sudo neofetch
         make -version
         gcc --version | head -n1
         sleep 10
         echo "开始编译"
         echo -e "$(nproc) thread compile"
         echo "编译已开始，日志文件 make.log"
         make -j$(nproc) 2>&1 | tee make.log
         echo "status=success" >> $GITHUB_STATE
         grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
         [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
         echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
         echo "压缩bin目录...... (Compressing bin directories ......)"
         7zz a -mx=9 -mmt=8 bin.7z bin
         mv bin.7z bin/targets/ramips/mt7621/
         mv make_download.log bin/targets/ramips/mt7621/
         mv make.log bin/targets/ramips/mt7621/
         mv "x-wrt-compilation-directory-$(curl "https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-config-tag.txt").7z" bin/targets/ramips/mt7621/
         echo "完成 (Finished.)"
#         cd bin/targets/ramips/mt7621/
#         wget https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/downloadurl.txt
#         wget https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/downloader.py
#         python3 downloader.py
#         sleep 3
#         curl https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-git-004.sh | bash

    - name: 检查空间使用情况 (Check space usage)
      if: (!cancelled())
      run: df -hT

    - name:  上传bin目录 (Upload bin directory)
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
        compression-level: 6

    - name: 整理文件 (Sort out documents)
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录 (Uploading Firmware Directory)
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        compression-level: 9

    - name: 生成发布标签 (Generate publish tags)
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        curl https://raw.githubusercontent.com/QC3284/openwrt-actions-config/refs/heads/main/x-wrt-actions-txt-001.sh | bash
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件以发布 (Upload firmware for release)
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧版本和删除工作流运行 (Delete old version and Delete workflow run)
      uses: ophub/delete-releases-workflows@main
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        delete_releases: true
        releases_keep_latest: 25
        delete_workflows: true
        workflows_keep_day: 30
        gh_token: ${{ secrets.GITHUB_TOKEN }}
